// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  (function(jQuery) {
    var $, globalVars, methods, settings;
    $ = jQuery;
    settings = {
      directSection: "#data_direct",
      hierarchySectionID: "data_hierarchy",
      hierarchySection: "",
      listingID: "list_current",
      listCountClass: "list_count",
      expandAll: ".expand_all",
      expandFlyout: ".expand_flyout",
      flyoutComplete: "flyout_complete",
      flyoutTopPad: 10,
      flyoutTopPos: -10,
      stackMenu: "#stack_menu",
      stackFlyoutClass: "stack_flyout",
      stackLineLimit: 5,
      stackLineHeight: 16,
      loadOptions: {
        id: 0,
        hierarchy: ""
      },
      stacksMetaData: {
        journal: {
          "ISSN": {
            "type": "link",
            "data": "issn",
            "link": "ils_url"
          },
          "Publisher": {
            "type": "api",
            "data": "publishers",
            "apiData": "title"
          }
        }
      },
      fileListing: ["pdf", "html", "htm", "xml"],
      fileExclude: ["zip"],
      fileListText: "Quick view",
      fileQuickViewID: "quick_view",
      traverseClass: "level_traverse",
      traverse: "",
      orphanCommentClass: "level_orphan",
      ajaxLoad: {
        id: "#ajax_load",
        aniSpeed: 100,
        height: 3.1
      }
    };
    globalVars = {
      parentID: 12,
      hierarchyTitle: "",
      parentTitle: "",
      fileListing: [],
      linkTitle: "",
      stackOpts: {
        id: 0,
        hierarchy: ""
      },
      orphanComment: "",
      listCount: ""
    };
    methods = {
      init: function(options) {
        return this.each(function() {
          var $this;
          $.extend(settings, options);
          $this = $(this);
          settings.traverse = "." + settings.traverseClass;
          globalVars.orphanComment = "." + settings.orphanCommentClass;
          settings.hierarchySection = "#" + settings.hierarchySectionID;
          globalVars.listCount = "." + settings.listCountClass;
          if ((settings.loadOptions.id != null) && (settings.loadOptions.hierarchy != null)) {
            methods.canonicalAjax($(settings.hierarchySection), settings.loadOptions);
          }
          $this.on("click", ".view_more_info", function(e) {
            e.preventDefault();
            options = {
              id: $(this).attr("data-id"),
              hierarchy: $(this).attr("data-hierarchy")
            };
            return methods.canonicalAjax($(settings.hierarchySection), options);
          });
          $(settings.stackMenu).on("click", ".expand_list", function(e) {
            e.preventDefault();
            options = {
              id: $(this).attr("data-id"),
              hierarchy: $(this).attr("data-hierarchy")
            };
            return methods.canonicalAjax($(settings.hierarchySection), options);
          });
          $(settings.hierarchySection).on("click", ".expand_list", function(e) {
            e.preventDefault();
            options = {
              id: $(this).attr("data-id"),
              hierarchy: $(this).attr("data-hierarchy")
            };
            if (methods.getChild(options.hierarchy) != null) {
              methods.listExpandAjax($(this), options);
            }
            if (!$(this).hasClass("selected")) {
              return $(this).addClass("selected");
            } else {
              return $(this).removeClass("selected");
            }
          });
          $this.on("click", settings.expandFlyout, function(e) {
            var baseHeight, classToAdd, lineCount, lineHeight, linkHeight, stackLimitHeight;
            e.preventDefault();
            baseHeight = 14;
            lineHeight = settings.stackLineHeight;
            linkHeight = $(this).outerHeight();
            stackLimitHeight = baseHeight + lineHeight * settings.stackLineLimit;
            lineCount = (linkHeight - baseHeight) / lineHeight;
            classToAdd = "flyout_" + lineCount + "line";
            $(this).addClass(classToAdd);
            options = {
              id: $(this).attr("data-id"),
              hierarchy: $(this).attr("data-hierarchy")
            };
            if (methods.getChild(options.hierarchy) != null) {
              methods.flyoutAjax($(this), options);
              if (!$(this).parent().hasClass("selected")) {
                $(settings.stackMenu).children(".selected").removeClass("selected");
                return $(this).parent().addClass("selected");
              } else {
                return $(this).parent().removeClass("selected");
              }
            }
          });
          $(settings.hierarchySection).on("click", settings.expandAll, function(e) {
            var childLink, listTitle;
            e.preventDefault();
            listTitle = $(this).closest(settings.hierarchySection).find(".list_title");
            if (!$(this).hasClass("selected")) {
              $(this).addClass("selected");
              $(this).html("collapse all");
              options = {
                id: $(this).attr("data-id"),
                hierarchy: $(this).attr("data-hierarchy")
              };
              if (options.hierarchy !== "article") {
                return $(listTitle).children("li").each(function(i) {
                  var childLink, childOptions;
                  childLink = $(this).children("a");
                  childOptions = {
                    id: childLink.attr("data-id"),
                    hierarchy: childLink.attr("data-hierarchy")
                  };
                  if (!childLink.hasClass("selected")) {
                    childLink.addClass("selected");
                  }
                  if (childOptions.hierarchy === "volume" || childOptions.hierarchy === "issue" || childOptions.hierarchy === "article") {
                    return methods.listExpandAjax(childLink, childOptions);
                  }
                });
              }
            } else {
              $(this).removeClass("selected");
              $(this).html("expand all");
              return childLink = $(listTitle).children("li").find("a").removeClass("selected");
            }
          });
          $this.on("click", function(event) {
            var stackFlyout, stackFlyoutClass, _target;
            _target = $(event.target);
            stackFlyoutClass = settings.stackFlyoutClass;
            stackFlyout = "." + stackFlyoutClass;
            if (!_target.closest(stackFlyout).length && !_target.siblings().hasClass(stackFlyoutClass)) {
              return $(stackFlyout).parent().removeClass("selected");
            }
          });
          return $this.on("click", ".view_file", function(event) {
            event.preventDefault();
            options = {
              id: $(this).attr("data-id"),
              hierarchy: $(this).attr("data-hierarchy")
            };
            return methods.makeStacks(options);
          });
        });
      },
      checkExpandAll: function() {
        var _this;
        _this = $(settings.expandAll);
        if (!_this.hasClass("selected")) {

        } else {
          _this.removeClass("selected");
          return _this.html("expand all");
        }
      },
      checkInArray: function(obj, array) {
        var i, k, objExists, objFound, _i, _len;
        objExists = false;
        for (k = _i = 0, _len = array.length; _i < _len; k = ++_i) {
          i = array[k];
          if (i === obj) {
            objExists = true;
          }
        }
        objFound = objExists ? true : false;
        return objFound;
      },
      getFilePathSort: function(a, b) {
        var x, y;
        x = a.file_path;
        y = b.file_path;
        if (x < y) {
          return 1;
        }
        if (x > y) {
          return -1;
        }
      },
      getChild: function(hierarchy) {
        var child;
        if (hierarchy === "journal") {
          child = "volume";
        } else if (hierarchy === "volume") {
          child = "issue";
        } else if (hierarchy === "issue") {
          child = "article";
        } else if (hierarchy === "article") {
          child = "file";
        }
        return child;
      },
      getListCut: function(_ulClass) {
        var listCount, _listCount;
        _listCount = _ulClass.prev("p").find(globalVars.listCount);
        listCount = parseInt(_listCount.html(), 10);
        listCount--;
        return _listCount.html(listCount);
      },
      getFileExtension: function(filename) {
        var ext, extension, filePattern;
        filePattern = /\.([0-9a-z]+)(?:[\?#]|$)/i;
        ext = filename.match(filePattern);
        extension = ext === null ? null : ext[1];
        return extension;
      },
      getParent: function(hierarchy) {
        var parent;
        switch (hierarchy) {
          case "file":
            parent = "article";
            break;
          case "article":
            parent = "issue";
            break;
          case "issue":
            parent = "volume";
            break;
          case "volume":
            parent = "journal";
        }
        return parent;
      },
      getParentID: function(options) {
        var parent;
        parent = methods.getParent(options.hierarchy);
        $.ajax({
          url: "/api/v1/stacks/" + options.hierarchy + "/" + options.id + "/",
          dataType: "json",
          async: false,
          data: {
            format: "json"
          },
          success: function(data) {
            var ancestor, parentID, parentURL, parentUrlArray, parentUrlSplit;
            if (data[parent] !== void 0) {
              parentURL = data[parent];
            } else {
              if (data["" + parent + "s"].length === 0) {
                ancestor = parent;
                while (data["" + ancestor + "s"].length === 0) {
                  ancestor = methods.getParent(ancestor);
                }
                parentUrlArray = data["" + ancestor + "s"];
                globalVars.stackOpts.hierarchy = methods.getChild(ancestor);
                parent = ancestor;
              } else {
                parentUrlArray = data["" + parent + "s"];
              }
              parentURL = parentUrlArray[parentUrlArray.length - 1];
            }
            parentUrlSplit = parentURL.split("" + parent + "/");
            parentID = parseInt(parentUrlSplit[1]);
            return globalVars.parentID = parentID;
          }
        });
        return globalVars.parentID;
      },
      getFileData: function(data) {
        var filePath, fileType, getURL, options;
        filePath = data.file_path;
        fileType = methods.getFileExtension(filePath);
        if (fileType === "xml") {
          getURL = data.stacks_get_transform_url;
        } else {
          getURL = data.stacks_get_absolute_url;
        }
        if (fileType != null) {
          options = {
            href: getURL,
            fileType: fileType.toLowerCase()
          };
          return options;
        } else {
          return null;
        }
      },
      makeOrphanComment: function(options, ODL, descendant) {
        var orphanAncestor, orphanChain, orphanComment;
        orphanComment = "This " + options.hierarchy + " has ";
        orphanComment += "<strong class=\"" + settings.listCountClass + "\">" + ODL + "</strong> orphaned " + descendant;
        if (ODL > 1) {
          orphanComment += "s. They do not belong to any ";
        } else {
          orphanComment += ". It does not belong to any ";
        }
        orphanAncestor = methods.getParent(descendant);
        orphanChain = 1;
        while (orphanAncestor !== options.hierarchy) {
          if (methods.getParent(orphanAncestor) === options.hierarchy) {
            if (orphanChain === 1) {
              orphanComment += "" + orphanAncestor + "s.";
            } else {
              orphanComment += "or " + orphanAncestor + "s.";
            }
          } else {
            if (orphanChain === 1 && methods.getParent(methods.getParent(orphanAncestor)) === options.hierarchy) {
              orphanComment += "" + orphanAncestor + "s ";
            } else {
              orphanComment += "" + orphanAncestor + "s, ";
            }
          }
          orphanAncestor = methods.getParent(orphanAncestor);
          orphanChain++;
        }
        return orphanComment;
      },
      makeOrphanList: function(_this, options, descendant, orphanData) {
        var ODL, makeUL, orphanComment, ulClass;
        ODL = orphanData.length;
        makeUL = "list_orphan_" + descendant + "s_" + options.hierarchy + "_" + options.id;
        ulClass = "." + makeUL;
        _this.append($("<ul />").addClass(makeUL).addClass("list_" + options.hierarchy));
        orphanComment = methods.makeOrphanComment(options, ODL, descendant);
        $(ulClass).before($("<p />").html(orphanComment).addClass(settings.orphanCommentClass));
        return ulClass;
      },
      makeOrphanLoop: function(_this, options, data) {
        var descendant, entry, grandChild, i, orphanData, ulClass, _i, _len, _results;
        descendant = methods.getChild(options.hierarchy);
        grandChild = methods.getChild(descendant);
        _results = [];
        while ((descendant != null) && (grandChild != null)) {
          orphanData = data["orphan_" + descendant + "s"];
          if (orphanData !== void 0) {
            if (orphanData.length > 0) {
              ulClass = methods.makeOrphanList(_this, options, descendant, orphanData);
              if (!(methods.getChild(descendant) != null)) {
                orphanData = orphanData.sort(methods.getFilePathSort);
              }
              for (_i = 0, _len = orphanData.length; _i < _len; _i++) {
                i = orphanData[_i];
                entry = methods.makeDropdownLI(i, options, descendant);
                if (entry != null) {
                  $(ulClass).prepend(entry);
                } else {
                  methods.getListCut($(ulClass));
                }
              }
            }
          }
          _results.push(descendant = methods.getChild(descendant));
        }
        return _results;
      },
      makeAjaxLoad: function() {
        var al, alHeight;
        alHeight = globalVars.getEm * settings.ajaxLoad.height * -1;
        al = $(settings.ajaxLoad.id);
        if (al.hasClass("selected")) {
          return al.removeClass("selected").fadeOut(settings.ajaxLoad.aniSpeed);
        } else {
          return al.show().addClass("selected");
        }
      },
      makeDropdownLI: function(i, options, descendant) {
        var child, fileOptions, grandChild, listLink, listSpan, listText, spanLink, theLevel, theList;
        descendant = descendant || null;
        if (descendant != null) {
          child = descendant;
        } else {
          child = methods.getChild(options.hierarchy);
        }
        theLevel = "level_" + child;
        if (i.title) {
          listText = i.title;
        } else if (i.file_path) {
          listText = i.file_path;
        } else if (i.resource_uri) {
          listText = i.resource_uri;
        } else if (i.attributes.title) {
          listText = i.attributes.title;
        } else {
          listText = i.id;
        }
        grandChild = methods.getChild(child || null);
        if (grandChild != null) {
          listLink = $("<a />").html(listText).attr({
            "href": "",
            "class": "expand_list",
            "data-hierarchy": child,
            "data-id": i.id,
            "data-foo": "foo"
          });
          spanLink = $("<a />").html("Go to " + child).attr({
            "href": "",
            "class": "show_" + child + "_" + i.id + " view_more_info",
            "data-hierarchy": child,
            "data-id": i.id
          });
          listSpan = $("<span />").html(" | ");
          listSpan.append(spanLink);
          theList = $("<li />").addClass(theLevel).append(listLink);
          theList = theList.append(listSpan);
          return theList;
        } else {
          fileOptions = methods.getFileData(i);
          if (fileOptions != null) {
            if (methods.checkInArray(fileOptions.fileType, settings.fileExclude) === false) {
              listLink = $("<a />").html(listText).attr({
                "href": fileOptions.href,
                "class": "view_" + child + " view_more_info",
                "data-hierarchy": child,
                "data-id": i.id,
                "data-file-type": fileOptions.fileType
              });
              theList = $("<li />").addClass(theLevel).append(listLink);
              return theList;
            } else {
              return null;
            }
          } else {
            return null;
          }
        }
      },
      makeMetaDataAjax: function(_this, metaWord, dataObject, apiData) {
        return $.ajax({
          url: dataObject,
          dataType: "json",
          data: {
            format: "json"
          },
          success: function(data) {
            var valueText;
            globalVars.parentTitle = data[apiData];
            valueText = "" + metaWord + ":  <span>" + globalVars.parentTitle + "</span>";
            return _this.find("ul").append($("<li />").addClass("meta_" + (metaWord.toLowerCase())).html(valueText));
          }
        });
      },
      makeMetaData: function(_this, options, data) {
        var ULID, i, key, makeUL, value, valueHierarchy, valueLink, _ref, _results;
        makeUL = "stack_meta_" + options.hierarchy + "_" + options.id;
        ULID = "#" + makeUL;
        _ref = settings.stacksMetaData;
        _results = [];
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          valueHierarchy = _ref[key];
          if (options.hierarchy === key) {
            _this.append($("<ul />").attr("id", ULID));
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (key in valueHierarchy) {
                if (!__hasProp.call(valueHierarchy, key)) continue;
                value = valueHierarchy[key];
                if (value.type === "text") {
                  _this.find("ul").append($("<li />").html("" + key + ":  <span>" + data[value.data] + "</span>"));
                }
                if (value.type === "link") {
                  valueLink = $("<a />").html("" + data[value.data]).attr({
                    href: data[value.link]
                  });
                  _this.find("ul").append($("<li />").html("" + key + ": ").append(valueLink));
                }
                if (value.type === "api") {
                  if (typeof data[value.data] !== "string") {
                    _results1.push((function() {
                      var _i, _len, _ref1, _results2;
                      _ref1 = data[value.data];
                      _results2 = [];
                      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                        i = _ref1[_i];
                        _results2.push(methods.makeMetaDataAjax(_this, key, data[value.data], value.apiData));
                      }
                      return _results2;
                    })());
                  } else {
                    _results1.push(methods.makeMetaDataAjax(_this, key, data[value.data], value.apiData));
                  }
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      makeStacks: function(options) {
        var parent, parentID, stackLink, stackMenu, stackParent, _results;
        parent = methods.getParent(options.hierarchy);
        stackMenu = $(settings.stackMenu);
        stackMenu.empty();
        globalVars.stackOpts = {
          id: options.id,
          hierarchy: options.hierarchy
        };
        _results = [];
        while (globalVars.stackOpts.hierarchy) {
          $.ajax({
            url: "/api/v1/stacks/" + globalVars.stackOpts.hierarchy + "/" + globalVars.stackOpts.id + "/",
            dataType: "json",
            async: false,
            data: {
              format: "json"
            },
            success: function(data) {
              var makeStackLI, stackLI, stackLink;
              if (data.title != null) {
                globalVars.hierarchyTitle = data.title;
              } else if (methods.getFileExtension(data.file_path) != null) {
                globalVars.hierarchyTitle = "." + (methods.getFileExtension(data.file_path).toUpperCase()) + " File";
              } else {
                globalVars.hierarchyTitle = data.resource_uri;
              }
              stackLink = $("<a />").html(globalVars.hierarchyTitle).attr({
                "data-id": globalVars.stackOpts.id,
                "data-hierarchy": globalVars.stackOpts.hierarchy,
                "href": "",
                "class": "expand_flyout"
              });
              makeStackLI = "stack_" + globalVars.stackOpts.hierarchy;
              stackLI = "#" + makeStackLI;
              stackMenu.prepend($("<li />").attr("id", makeStackLI).html(stackLink));
              return methods.makeMetaData($(stackLI), globalVars.stackOpts, data);
            }
          });
          stackParent = methods.getParent(globalVars.stackOpts.hierarchy);
          if (stackParent) {
            parentID = methods.getParentID(globalVars.stackOpts);
            globalVars.stackOpts.id = parentID;
          } else {
            stackLink = $("<a />").html("eJournals | Stacks").attr({
              "href": "/stacks/ejournal/"
            });
            stackMenu.prepend($("<li />").html(stackLink));
          }
          _results.push(globalVars.stackOpts.hierarchy = methods.getParent(globalVars.stackOpts.hierarchy));
        }
        return _results;
      },
      makeFileView: function(_this, options, data) {
        var fileExtension, fileList, fileListIndex, fileQuickView, fileType, getFilelistSort, i, id, k, stacksPath, title, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
        fileQuickView = "#" + settings.fileQuickViewID;
        $(fileQuickView).remove();
        getFilelistSort = function(a, b) {
          var i, k, sortArray, _i, _len, _ref;
          sortArray = {};
          _ref = settings.fileListing;
          for (k = _i = 0, _len = _ref.length; _i < _len; k = ++_i) {
            i = _ref[k];
            sortArray[settings.fileListing[k]] = k;
          }
          if (sortArray[a[0]] < sortArray[b[0]]) {
            return -1;
          }
          if (sortArray[a[0]] > sortArray[b[0]]) {
            return 1;
          }
          return 0;
        };
        fileList = [];
        fileListIndex = 0;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          i = data[_i];
          stacksPath = i.stacks_get_transform_url;
          fileExtension = methods.getFileExtension(stacksPath);
          if (fileExtension != null) {
            fileType = fileExtension;
            id = i.id;
            title = i.file_path;
            _ref = settings.fileListing;
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              i = _ref[_j];
              if (i === fileExtension) {
                fileList[fileListIndex] = [id, stacksPath, fileExtension, fileType, title];
                fileListIndex++;
              }
            }
          }
        }
        if (fileList.length > 0) {
          fileList = fileList.sort(getFilelistSort);
          for (k = _k = 0, _len2 = fileList.length; _k < _len2; k = ++_k) {
            i = fileList[k];
            fileList[k][2] = "." + (i[2].toUpperCase());
            fileList[k][5] = $("<a />").html(fileList[k][2]).attr({
              "data-hierarchy": methods.getChild(options.hierarchy),
              "data-id": fileList[k][0],
              "href": fileList[k][1],
              "data-file-type": fileList[k][3],
              "title": fileList[k][4],
              "class": "view_file view_more_info"
            });
          }
          _this.before($("<footer />").attr("id", settings.fileQuickViewID));
          $(fileQuickView).html($("<em />").html("" + settings.fileListText + ": "));
          _results = [];
          for (k = _l = 0, _len3 = fileList.length; _l < _len3; k = ++_l) {
            i = fileList[k];
            $(fileQuickView).append(fileList[k][5]);
            if (k < fileList.length - 1) {
              _results.push($(fileQuickView).append(" | "));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      },
      makeCanonical: function(_this, options) {
        var fileQuickView;
        fileQuickView = "#" + settings.fileQuickViewID;
        $(fileQuickView).remove();
        $(settings.traverse).remove();
        $(globalVars.orphanComment).remove();
        return methods.checkExpandAll();
      },
      makeTitleList: function(_this, options, data, descendant) {
        var child, grandChild, makeUL, title, totalCount, ulClass;
        descendant = descendant || null;
        if (descendant != null) {
          child = descendant;
        } else {
          child = methods.getChild(options.hierarchy);
        }
        grandChild = methods.getChild(child || null);
        totalCount = data.length;
        title = "This " + options.hierarchy + " has ";
        title += "<strong class=\"" + settings.listCountClass + "\">" + totalCount + "</strong> " + child;
        if (totalCount !== 1) {
          title = "" + title + "s";
        }
        _this.find("h2").find("strong").html(title);
        if (!methods.getChild(child) || totalCount === 0) {
          _this.find("h2").find("span").hide();
        } else {
          _this.find("h2").find("span").show();
        }
        _this.find("h2").siblings("ul").remove();
        _this.find("h2").siblings("p").remove();
        if (descendant === null) {
          makeUL = "list_" + options.hierarchy + "_" + options.id;
          ulClass = "." + makeUL;
          _this.append($("<ul />").attr({
            "data-hierarchy": options.hierarchy,
            "data-id": options.id,
            "class": "" + makeUL + " list_" + options.hierarchy + " list_title",
            "id": settings.listingID
          }));
        }
        if (!(grandChild != null)) {
          methods.makeFileView($(ulClass), options, data);
        }
        return ulClass;
      },
      makeExpandList: function(_this, options, childData) {
        var child, makeUL, parentElement, ulClass;
        child = methods.getChild(options.hierarchy);
        parentElement = _this.parent();
        makeUL = "list_" + options.hierarchy + "_" + options.id;
        ulClass = "." + makeUL;
        parentElement.children("span").after($("<ul />").addClass(makeUL).addClass("list_" + options.hierarchy));
        if (methods.getChild(child) === void 0) {
          methods.makeFileView(_this.siblings("ul"), options, childData);
        }
        return ulClass;
      },
      makeFlyout: function(_this, options) {
        var flyoutClass, flyoutDiv, flyoutLink, makeUL, ulClass;
        flyoutDiv = "flyout_" + options.hierarchy + "_" + options.id;
        flyoutClass = "." + flyoutDiv;
        _this.parent().append($("<div />").addClass("" + flyoutDiv + " stack_flyout").attr({
          "data-hierarchy": options.hierarchy
        }));
        flyoutLink = $("<a />").html(_this.html()).attr({
          "data-id": options.id,
          "data-hierarchy": options.hierarchy,
          "class": "expand_list",
          "href": ""
        });
        $(flyoutClass).append($("<p />").html(flyoutLink));
        makeUL = "list_" + options.hierarchy + "_" + options.id;
        ulClass = "." + makeUL;
        $(flyoutClass).append($("<ul />").addClass(makeUL));
        return ulClass;
      },
      makeFlyoutListener: function(_this, offset) {
        var flyoutCompleteClass;
        _this.css("top", settings.flyoutTopPos);
        _this.attr("data-offset", offset);
        flyoutCompleteClass = "." + settings.flyoutComplete;
        _this.find(flyoutCompleteClass).remove();
        return _this.append($("<span />").addClass(settings.flyoutComplete));
      },
      canonicalAjax: function(_this, options) {
        if (methods.getChild(options.hierarchy) != null) {
          return $.ajax({
            url: "/api/v1/stacks/" + options.hierarchy + "-expanded/" + options.id + "/",
            dataType: "json",
            data: {
              format: "json"
            },
            beforeSend: function(jqXHR, settings) {
              methods.makeAjaxLoad();
              return jqXHR.setRequestHeader('X-CSRFToken', $('input[name=csrfmiddlewaretoken]').val());
            },
            success: function(data) {
              var childData, entry, i, ulClass, _i, _len;
              methods.makeStacks(options);
              methods.makeCanonical(_this, options);
              if (methods.getChild(methods.getChild(options.hierarchy)) != null) {
                childData = data["" + (methods.getChild(options.hierarchy)) + "s"];
              } else {
                childData = data.all_files;
              }
              ulClass = methods.makeTitleList(_this, options, childData);
              if (childData !== void 0) {
                if (childData.length > 0) {
                  if (!(methods.getChild(methods.getChild(options.hierarchy)) != null)) {
                    childData = childData.sort(methods.getFilePathSort);
                  }
                  for (_i = 0, _len = childData.length; _i < _len; _i++) {
                    i = childData[_i];
                    entry = methods.makeDropdownLI(i, options);
                    if (entry != null) {
                      $(ulClass).prepend(entry);
                    } else {
                      methods.getListCut($(ulClass));
                    }
                  }
                }
              }
              if (childData === void 0 || childData.length === 0) {
                $(ulClass).remove();
              }
              methods.makeOrphanLoop(_this, options, data);
              return methods.makeAjaxLoad();
            }
          });
        }
      },
      listExpandAjax: function(_this, options) {
        if (_this.parent().children("ul").length === 0) {
          return $.ajax({
            url: "/api/v1/stacks/" + options.hierarchy + "-expanded/" + options.id + "/",
            dataType: "json",
            data: {
              format: "json"
            },
            beforeSend: function() {
              return methods.makeAjaxLoad();
            },
            success: function(data) {
              var childData, entry, i, ulClass, _i, _len;
              if (methods.getChild(methods.getChild(options.hierarchy)) != null) {
                childData = data["" + (methods.getChild(options.hierarchy)) + "s"];
              } else {
                childData = data.all_files;
              }
              if (childData !== void 0) {
                if (childData.length > 0) {
                  if (!(methods.getChild(methods.getChild(options.hierarchy)) != null)) {
                    childData = childData.sort(methods.getFilePathSort);
                  }
                  ulClass = methods.makeExpandList(_this, options, childData);
                  for (_i = 0, _len = childData.length; _i < _len; _i++) {
                    i = childData[_i];
                    entry = methods.makeDropdownLI(i, options);
                    if (entry != null) {
                      $(ulClass).prepend(entry);
                    } else {
                      methods.getListCut($(ulClass));
                    }
                  }
                }
              }
              methods.makeOrphanLoop(_this.parent(), options, data);
              return methods.makeAjaxLoad();
            }
          });
        }
      },
      flyoutAjax: function(_this, options) {
        var offset;
        offset = _this.offset().top - settings.flyoutTopPad;
        if (_this.siblings("div").length === 0) {
          return $.ajax({
            url: "/api/v1/stacks/" + options.hierarchy + "-expanded/" + options.id + "/",
            dataType: "json",
            async: false,
            data: {
              format: "json"
            },
            beforeSend: function() {
              return methods.makeAjaxLoad();
            },
            success: function(data) {
              var childData, entry, i, ulClass, _i, _len;
              childData = data["" + (methods.getChild(options.hierarchy)) + "s"];
              if (childData === void 0) {
                childData = data.all_files;
              }
              ulClass = methods.makeFlyout(_this, options);
              for (_i = 0, _len = childData.length; _i < _len; _i++) {
                i = childData[_i];
                entry = methods.makeDropdownLI(i, options);
                $(settings.stackMenu).find(ulClass).prepend(entry);
              }
              return methods.makeAjaxLoad();
            },
            complete: function() {
              return methods.makeFlyoutListener(_this.siblings("div"), offset);
            }
          });
        } else {
          if (_this.siblings("div").attr("data-offset") > 0) {
            return methods.makeFlyoutListener(_this.siblings("div"), offset);
          }
        }
      }
    };
    return $.fn.ajaxCalls = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === 'object' || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jQuery.ajaxCalls");
      }
    };
  })(jQuery);

}).call(this);
